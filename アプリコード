import React, { useState } from 'react';
import { BookOpen, Music, Save, Trash2, Edit3 } from 'lucide-react';

const PoetryAnalyzerApp = () => {
  const [poem, setPoem] = useState('');
  const [analysis, setAnalysis] = useState(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [savedPoems, setSavedPoems] = useState([]);
  const [currentView, setCurrentView] = useState('write'); // 'write' or 'history'

  const analyzePoem = async () => {
    if (!poem.trim()) return;
    
    setIsAnalyzing(true);
    
    try {
      const response = await fetch("https://api.anthropic.com/v1/messages", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "claude-sonnet-4-20250514",
          max_tokens: 1500,
          messages: [
            { 
              role: "user", 
              content: `以下の詩を分析して、日本語で解説してください。以下の形式のJSONで回答してください：

{
  "theme": "詩の主要なテーマ",
  "emotion": "表現されている感情",
  "techniques": ["使用されている表現技法のリスト"],
  "imagery": "詩に描かれているイメージや情景",
  "songPotential": {
    "rhythm": "歌にした時のリズムの特徴",
    "melody": "メロディーとの相性について",
    "structure": "歌詞としての構造について",
    "overall": "総合的な歌詞適性の評価"
  },
  "interpretation": "詩全体の解釈と感想"
}

詩：
${poem}

必ずJSONフォーマットのみで回答してください。` 
            }
          ]
        })
      });
      
      const data = await response.json();
      let responseText = data.content[0].text;
      
      // JSONの前後のマークダウンやテキストを削除
      responseText = responseText.replace(/```json\n?/g, "").replace(/```\n?/g, "").trim();
      
      const analysisData = JSON.parse(responseText);
      setAnalysis(analysisData);
    } catch (error) {
      console.error("分析エラー:", error);
      setAnalysis({
        theme: "分析中にエラーが発生しました",
        emotion: "エラー",
        techniques: ["エラーのため分析できませんでした"],
        imagery: "エラーのため分析できませんでした",
        songPotential: {
          rhythm: "エラー",
          melody: "エラー",
          structure: "エラー",
          overall: "エラー"
        },
        interpretation: "申し訳ございませんが、分析中にエラーが発生しました。もう一度お試しください。"
      });
    }
    
    setIsAnalyzing(false);
  };

  const savePoem = () => {
    if (!poem.trim() || !analysis) return;
    
    const newPoem = {
      id: Date.now(),
      text: poem,
      analysis: analysis,
      createdAt: new Date().toLocaleString('ja-JP')
    };
    
    setSavedPoems(prev => [newPoem, ...prev]);
  };

  const deletePoem = (id) => {
    setSavedPoems(prev => prev.filter(p => p.id !== id));
  };

  const loadPoem = (savedPoem) => {
    setPoem(savedPoem.text);
    setAnalysis(savedPoem.analysis);
    setCurrentView('write');
  };

  const clearCurrent = () => {
    setPoem('');
    setAnalysis(null);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-100">
      <div className="max-w-6xl mx-auto p-6">
        {/* ヘッダー */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-2">詩創作＆AI解説</h1>
          <p className="text-gray-600">あなたの詩を深く理解し、歌としての可能性を探ります</p>
        </div>

        {/* ナビゲーション */}
        <div className="flex justify-center mb-6">
          <div className="bg-white rounded-lg p-1 shadow-md">
            <button
              onClick={() => setCurrentView('write')}
              className={`px-6 py-2 rounded-md flex items-center gap-2 transition-all ${
                currentView === 'write'
                  ? 'bg-blue-500 text-white shadow-md'
                  : 'text-gray-600 hover:bg-gray-100'
              }`}
            >
              <Edit3 size={18} />
              詩を書く
            </button>
          </div>
          <div className="bg-white rounded-lg p-1 shadow-md ml-2">
            <button
              onClick={() => setCurrentView('history')}
              className={`px-6 py-2 rounded-md flex items-center gap-2 transition-all ${
                currentView === 'history'
                  ? 'bg-blue-500 text-white shadow-md'
                  : 'text-gray-600 hover:bg-gray-100'
              }`}
            >
              <BookOpen size={18} />
              保存した詩 ({savedPoems.length})
            </button>
          </div>
        </div>

        {currentView === 'write' ? (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* 詩入力エリア */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-semibold text-gray-800 flex items-center gap-2">
                  <Edit3 size={20} />
                  あなたの詩
                </h2>
                {poem && (
                  <button
                    onClick={clearCurrent}
                    className="text-gray-500 hover:text-red-500 transition-colors"
                    title="クリア"
                  >
                    <Trash2 size={18} />
                  </button>
                )}
              </div>
              
              <textarea
                value={poem}
                onChange={(e) => setPoem(e.target.value)}
                placeholder="ここにあなたの詩を書いてください..."
                className="w-full h-64 p-4 border border-gray-200 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent font-mono text-gray-700 leading-relaxed"
              />
              
              <div className="flex gap-3 mt-4">
                <button
                  onClick={analyzePoem}
                  disabled={!poem.trim() || isAnalyzing}
                  className="flex-1 bg-blue-500 text-white py-3 px-6 rounded-lg hover:bg-blue-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors font-medium"
                >
                  {isAnalyzing ? '分析中...' : 'AI解説を生成'}
                </button>
                
                {analysis && (
                  <button
                    onClick={savePoem}
                    className="bg-green-500 text-white py-3 px-6 rounded-lg hover:bg-green-600 transition-colors flex items-center gap-2"
                  >
                    <Save size={18} />
                    保存
                  </button>
                )}
              </div>
            </div>

            {/* 解説表示エリア */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-xl font-semibold text-gray-800 mb-4 flex items-center gap-2">
                <BookOpen size={20} />
                AI解説
              </h2>
              
              {analysis ? (
                <div className="space-y-4 max-h-96 overflow-y-auto">
                  <div className="p-4 bg-blue-50 rounded-lg">
                    <h3 className="font-medium text-blue-800 mb-2">テーマ</h3>
                    <p className="text-blue-700">{analysis.theme}</p>
                  </div>
                  
                  <div className="p-4 bg-purple-50 rounded-lg">
                    <h3 className="font-medium text-purple-800 mb-2">感情</h3>
                    <p className="text-purple-700">{analysis.emotion}</p>
                  </div>
                  
                  <div className="p-4 bg-green-50 rounded-lg">
                    <h3 className="font-medium text-green-800 mb-2">表現技法</h3>
                    <ul className="text-green-700 space-y-1">
                      {analysis.techniques.map((technique, index) => (
                        <li key={index} className="flex items-start gap-2">
                          <span className="text-green-500 mt-1">•</span>
                          {technique}
                        </li>
                      ))}
                    </ul>
                  </div>
                  
                  <div className="p-4 bg-yellow-50 rounded-lg">
                    <h3 className="font-medium text-yellow-800 mb-2">イメージ・情景</h3>
                    <p className="text-yellow-700">{analysis.imagery}</p>
                  </div>
                  
                  <div className="p-4 bg-pink-50 rounded-lg">
                    <h3 className="font-medium text-pink-800 mb-2 flex items-center gap-2">
                      <Music size={16} />
                      歌としての可能性
                    </h3>
                    <div className="space-y-2 text-pink-700 text-sm">
                      <p><strong>リズム:</strong> {analysis.songPotential.rhythm}</p>
                      <p><strong>メロディー:</strong> {analysis.songPotential.melody}</p>
                      <p><strong>構造:</strong> {analysis.songPotential.structure}</p>
                      <p><strong>総合評価:</strong> {analysis.songPotential.overall}</p>
                    </div>
                  </div>
                  
                  <div className="p-4 bg-gray-50 rounded-lg">
                    <h3 className="font-medium text-gray-800 mb-2">総合解釈</h3>
                    <p className="text-gray-700">{analysis.interpretation}</p>
                  </div>
                </div>
              ) : (
                <div className="text-center text-gray-500 py-12">
                  <BookOpen size={48} className="mx-auto mb-4 text-gray-300" />
                  <p>詩を入力して「AI解説を生成」ボタンを押すと、<br />ここに詳細な解説が表示されます</p>
                </div>
              )}
            </div>
          </div>
        ) : (
          /* 履歴表示 */
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-xl font-semibold text-gray-800 mb-6">保存した詩</h2>
            
            {savedPoems.length === 0 ? (
              <div className="text-center text-gray-500 py-12">
                <BookOpen size={48} className="mx-auto mb-4 text-gray-300" />
                <p>まだ保存された詩がありません</p>
              </div>
            ) : (
              <div className="space-y-4">
                {savedPoems.map((savedPoem) => (
                  <div key={savedPoem.id} className="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
                    <div className="flex justify-between items-start mb-3">
                      <div className="text-sm text-gray-500">{savedPoem.createdAt}</div>
                      <div className="flex gap-2">
                        <button
                          onClick={() => loadPoem(savedPoem)}
                          className="text-blue-500 hover:text-blue-600 text-sm"
                        >
                          編集する
                        </button>
                        <button
                          onClick={() => deletePoem(savedPoem.id)}
                          className="text-red-500 hover:text-red-600"
                        >
                          <Trash2 size={16} />
                        </button>
                      </div>
                    </div>
                    
                    <div className="mb-3">
                      <div className="bg-gray-50 p-3 rounded text-sm font-mono whitespace-pre-wrap">
                        {savedPoem.text.length > 100 
                          ? savedPoem.text.substring(0, 100) + '...' 
                          : savedPoem.text}
                      </div>
                    </div>
                    
                    <div className="text-sm text-gray-600">
                      <strong>テーマ:</strong> {savedPoem.analysis.theme}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default PoetryAnalyzerApp;
